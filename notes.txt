SQL from Ed's email dated 3/16/15 11:57 am - see other emails from this day
for more notes on what they're currently doing too. SALIX uses basic
frequency in a lookup table to guess.

See sql below. Lichen and bryophyte databases definitely has OCR data.

SELECT IFNULL(i.originalurl, i.url) as url, r.rawstr, o.*
FROM images i inner join specprocessorrawlabels r ON i.imgid = r.imgid
INNER JOIN omoccurrences o ON i.occid = o.occid;

Unprocessed specimens:

SELECT IFNULL(i.originalurl, i.url) as url, r.rawstr, o.*
FROM images i inner join specprocessorrawlabels r ON i.imgid = r.imgid
INNER JOIN omoccurrences o ON i.occid = o.occid
WHERE o.processingstatus = "unprocessed";

Processed specimens:

SELECT IFNULL(i.originalurl, i.url) as url, r.rawstr, o.*
FROM images i inner join specprocessorrawlabels r ON i.imgid = r.imgid
INNER JOIN omoccurrences o ON i.occid = o.occid
WHERE o.processingstatus IS NULL OR o.processingstatus != "unprocessed";




Dependancies:

apt-get install python-mysqldb
apt-get install tesseract-ocr
apt-get install python-sklearn python-numpy python-pandas

python-six python-lxml python-chardet python-beautifulsoup python-pil python-bs4
# THis setup fails
git clone https://github.com/concordusapps/python-hocr.git
cd python-hocr
python setup.py install
# Just ended up writing own parser based on bs4


alter database character set = 'utf8'


Correcting hocr_results after finding word_y0 and word_x1 swapped:
alter table hocr_results add column swap INT;
update hocr_results set swap=word_y0;
update hocr_results set word_y0=word_x1;
update hocr_results set word_x1=swap;
alter table hocr_results drop column swap;



SELECT min(word_x0) as min_word_x0, min(word_y0) as min_word_y0 FROM hocr_results 
WHERE occid=904652 AND word_x0>10 AND word_y0>10 AND LENGTH(TRIM(text))>2 GROUP BY occid;


  AND r.area_x0 > e.min_area_x0
  AND r.area_y0 > e.min_area_y0
  AND r.line_x0 > e.min_line_x0
  AND r.line_y0 > e.min_line_y0
  AND r.word_x0 > e.min_word_x0
  AND r.word_y0 > e.min_word_y0

